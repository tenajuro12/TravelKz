version: '3.8'

services:
  auth-service:
    build: ./auth_service
    container_name: auth-service
    depends_on:
      db:
        condition: service_healthy
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=123456
      - DB_NAME=TravelApp
      - AUTH_SERVICE_URL=http://auth-service:8082
    ports:
      - "8082:8082"
    networks:
      - app-network

  blogs-service:
    build: ./blogs_service
    container_name: blogs-service
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=123456
      - DB_NAME=TravelApp
      - AUTH_SERVICE_URL=http://auth-service:8082
    ports:
      - "8081:8081"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  events-service:
    build: ./events_service
    container_name: events-service
    environment:
      - DB_HOST=db
      - DB_USER=postgres
      - DB_PASSWORD=123456
      - DB_NAME=TravelApp
      - AUTH_SERVICE_URL=http://auth-service:8082
    ports:
      - "8083:8083"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  gateway-service:
    build: ./gateway_service
    container_name: gateway-service
    environment:
      - AUTH_SERVICE_URL=http://auth-service:8082
    ports:
      - "8080:8080"
    depends_on:
      - auth-service
      - blogs-service
      - events-service
    networks:
      - app-network

  db:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: TravelApp
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d TravelApp"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge